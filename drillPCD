<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Drill Calculator & PCD Coordinate Generator</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
    <!-- Add jsPDF library for PDF generation -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js"></script>
    <style>
        body {
            font-family: 'Inter', sans-serif;
        }
        .input-group {
            position: relative;
        }
        .input-unit {
            position: absolute;
            right: 0.75rem;
            top: 50%;
            transform: translateY(-50%);
            color: #9ca3af;
            font-size: 0.875rem;
        }
        .toggle-btn {
            transition: background-color 0.2s ease-in-out, color 0.2s ease-in-out;
        }
        .toggle-btn.active {
            background-color: #4f46e5;
            color: white;
        }
        .toggle-btn:not(.active) {
            background-color: #374151;
            color: #d1d5db;
        }
    </style>
</head>
<body class="bg-gray-900 text-white flex items-center justify-center min-h-screen p-4">

    <div class="w-full max-w-md bg-gray-800 p-6 sm:p-8 rounded-2xl shadow-2xl border border-gray-700">
        
        <!-- Drill Speed Calculator Section -->
        <div>
            <h1 class="text-2xl sm:text-3xl font-bold text-center mb-2 text-indigo-400">Drill Speed Calculator</h1>
            <p class="text-center text-gray-400 mb-6">HSS Drill | No Coolant</p>
            <label class="block text-sm font-medium text-gray-300 mb-2 text-center">Select Material</label>
            <div class="flex justify-center mb-6 bg-gray-700 rounded-lg p-1">
                <button id="mild-steel-btn" class="toggle-btn w-1/2 py-2 rounded-md text-sm sm:text-base font-semibold active">Mild Steel</button>
                <button id="inox-btn" class="toggle-btn w-1/2 py-2 rounded-md text-sm sm:text-base font-semibold">Inox (Stainless)</button>
            </div>
            <div class="bg-gray-700/50 p-4 rounded-lg mb-6 border border-gray-600">
                <div class="flex justify-between items-center mt-2">
                    <span class="font-medium text-gray-300">Base Cutting Speed:</span>
                    <span id="cutting-speed-display" class="font-semibold text-white">15 m/min</span>
                </div>
            </div>
            <div class="space-y-4">
                <div>
                    <label for="drill-diameter" class="block text-sm font-medium text-gray-300 mb-1">Drill Diameter</label>
                    <div class="input-group"><input type="number" id="drill-diameter" class="w-full bg-gray-700 border border-gray-600 rounded-lg p-3" placeholder="e.g., 6"><span class="input-unit">mm</span></div>
                </div>
                <div>
                    <label for="drilling-depth" class="block text-sm font-medium text-gray-300 mb-1">Drilling Depth</label>
                    <div class="input-group"><input type="number" id="drilling-depth" class="w-full bg-gray-700 border border-gray-600 rounded-lg p-3" placeholder="e.g., 25"><span class="input-unit">mm</span></div>
                </div>
            </div>
            <div class="flex mt-6"><button id="calculate-btn" class="w-full bg-indigo-600 hover:bg-indigo-700 text-white font-bold py-3 px-4 rounded-lg transition">Calculate Speed/Feed</button></div>
            <div id="results" class="mt-8 pt-6 border-t border-gray-700 space-y-4 hidden">
                <h2 class="text-xl font-semibold text-center text-indigo-400">Adjusted Results</h2>
                <div class="grid grid-cols-2 gap-2 text-sm bg-gray-700/50 p-3 rounded-lg">
                    <span class="font-medium text-gray-300">Depth Ratio:</span><span id="depth-ratio-result" class="font-semibold text-white text-right">0x</span>
                    <span class="font-medium text-gray-300">Speed Reduction:</span><span id="speed-reduction-result" class="font-semibold text-white text-right">0%</span>
                    <span class="font-medium text-gray-300">Feed Reduction:</span><span id="feed-reduction-result" class="font-semibold text-white text-right">0%</span>
                    <span class="font-medium text-gray-300">Base Feed (f<sub class="lowercase">n</sub>):</span><span id="feed-per-rev-result" class="font-semibold text-white text-right">0 mm/rev</span>
                </div>
                <div class="flex justify-between items-center bg-gray-700 p-4 rounded-lg"><span class="font-medium text-gray-300">Spindle Speed:</span><span id="spindle-speed-result" class="font-bold text-2xl text-green-400">0 RPM</span></div>
                <div class="flex justify-between items-center bg-gray-700 p-4 rounded-lg"><span class="font-medium text-gray-300">Feed Rate:</span><span id="feed-rate-result" class="font-bold text-2xl text-green-400">0 mm/min</span></div>
            </div>
        </div>

        <!-- Divider -->
        <hr class="border-gray-600 my-8">

        <!-- PCD Coordinate Generator Section -->
        <div>
            <h1 class="text-2xl sm:text-3xl font-bold text-center mb-6 text-teal-400">PCD Coordinate Generator</h1>
            <div class="space-y-4">
                <div>
                    <label for="pcd" class="block text-sm font-medium text-gray-300 mb-1">Pitch Circle Diameter (PCD)</label>
                    <div class="input-group"><input type="number" id="pcd" class="w-full bg-gray-700 border border-gray-600 rounded-lg p-3" placeholder="e.g., 100"><span class="input-unit">mm</span></div>
                </div>
                <div class="grid grid-cols-2 gap-4">
                    <div>
                        <label for="start-angle" class="block text-sm font-medium text-gray-300 mb-1">Start Angle</label>
                        <div class="input-group"><input type="number" id="start-angle" value="0" class="w-full bg-gray-700 border border-gray-600 rounded-lg p-3"><span class="input-unit">°</span></div>
                    </div>
                    <div>
                        <label for="last-angle" class="block text-sm font-medium text-gray-300 mb-1">Last Angle</label>
                        <div class="input-group"><input type="number" id="last-angle" value="360" class="w-full bg-gray-700 border border-gray-600 rounded-lg p-3"><span class="input-unit">°</span></div>
                    </div>
                </div>
                <div>
                    <label for="num-holes" class="block text-sm font-medium text-gray-300 mb-1">Number of Holes</label>
                    <input type="number" id="num-holes" class="w-full bg-gray-700 border border-gray-600 rounded-lg p-3" placeholder="e.g., 8">
                </div>
                <div>
                    <label for="plane-select" class="block text-sm font-medium text-gray-300 mb-1">G-Code Plane</label>
                    <select id="plane-select" class="w-full bg-gray-700 border border-gray-600 rounded-lg p-3">
                        <option value="G17">G17 (X,Y)</option>
                        <option value="G18">G18 (X,Z)</option>
                        <option value="G19">G19 (Y,Z)</option>
                    </select>
                </div>
            </div>
            <div class="flex flex-col sm:flex-row gap-4 mt-6">
                <button id="generate-coords-btn" class="w-full bg-teal-600 hover:bg-teal-700 text-white font-bold py-3 px-4 rounded-lg transition">Generate Coordinates</button>
                <button id="download-pdf-btn" class="w-full bg-gray-600 hover:bg-gray-500 text-white font-bold py-3 px-4 rounded-lg transition">Download PDF</button>
            </div>
            <div id="pcd-results" class="mt-8 pt-6 border-t border-gray-700 hidden">
                <h2 class="text-xl font-semibold text-center text-teal-400 mb-4">Generated Coordinates</h2>
                <pre id="coordinates-output" class="bg-gray-900 text-white p-4 rounded-lg text-sm whitespace-pre-wrap"></pre>
            </div>
        </div>
        
        <div id="error-message" class="mt-4 text-center text-red-400 font-medium hidden"></div>
    </div>

    <script>
        // --- SHARED DOM & STATE ---
        const errorMessage = document.getElementById('error-message');
        const drillDiameterInput = document.getElementById('drill-diameter');
        
        // --- DRILL SPEED CALCULATOR ---
        (() => {
            const mildSteelBtn = document.getElementById('mild-steel-btn');
            const inoxBtn = document.getElementById('inox-btn');
            const cuttingSpeedDisplay = document.getElementById('cutting-speed-display');
            const drillingDepthInput = document.getElementById('drilling-depth');
            const calculateBtn = document.getElementById('calculate-btn');
            const resultsDiv = document.getElementById('results');
            const depthRatioResult = document.getElementById('depth-ratio-result');
            const speedReductionResult = document.getElementById('speed-reduction-result');
            const feedReductionResult = document.getElementById('feed-reduction-result');
            const feedPerRevResult = document.getElementById('feed-per-rev-result');
            const spindleSpeedResult = document.getElementById('spindle-speed-result');
            const feedRateResult = document.getElementById('feed-rate-result');

            let selectedMaterial = 'mildSteel';
            const CUTTING_SPEEDS = { mildSteel: 15, inox: 8 };

            mildSteelBtn.addEventListener('click', () => setMaterial('mildSteel'));
            inoxBtn.addEventListener('click', () => setMaterial('inox'));
            calculateBtn.addEventListener('click', calculate);

            function setMaterial(material) {
                selectedMaterial = material;
                mildSteelBtn.classList.toggle('active', material === 'mildSteel');
                inoxBtn.classList.toggle('active', material !== 'mildSteel');
                cuttingSpeedDisplay.textContent = `${CUTTING_SPEEDS[material]} m/min`;
                resultsDiv.classList.add('hidden');
            }

            function getFeedPerRev(diameter, material) {
                if (material === 'mildSteel') {
                    if (diameter <= 3) return 0.04; if (diameter <= 10) return 0.07; return 0.15;
                } else {
                    if (diameter <= 3) return 0.025; if (diameter <= 10) return 0.05; return 0.10;
                }
            }

            function calculate() {
                const drillDiameter = parseFloat(drillDiameterInput.value);
                const drillingDepth = parseFloat(drillingDepthInput.value);

                if (isNaN(drillDiameter) || isNaN(drillingDepth) || drillDiameter <= 0 || drillingDepth <= 0) {
                    showError('Please enter valid positive numbers for diameter and depth.');
                    return;
                }
                hideError();

                const cuttingSpeed = CUTTING_SPEEDS[selectedMaterial];
                const feedPerRev = getFeedPerRev(drillDiameter, selectedMaterial);
                const baseSpindleSpeed = (cuttingSpeed * 1000) / (Math.PI * drillDiameter);
                
                const depthRatio = drillingDepth / drillDiameter;
                let speedReduction = 0, feedReduction = 0;

                if (depthRatio > 6) { speedReduction = 0.35; feedReduction = 0.20; } 
                else if (depthRatio > 5) { speedReduction = 0.30; feedReduction = 0.20; } 
                else if (depthRatio > 4) { speedReduction = 0.20; feedReduction = 0.10; } 
                else if (depthRatio > 3) { speedReduction = 0.10; feedReduction = 0.10; }

                const adjustedSpindleSpeed = baseSpindleSpeed * (1 - speedReduction);
                const adjustedFeedPerRev = feedPerRev * (1 - feedReduction);
                const finalFeedRate = adjustedSpindleSpeed * adjustedFeedPerRev;

                depthRatioResult.textContent = `${depthRatio.toFixed(1)}x`;
                speedReductionResult.textContent = `${speedReduction * 100}%`;
                feedReductionResult.textContent = `${feedReduction * 100}%`;
                feedPerRevResult.textContent = `${feedPerRev.toFixed(2)} mm/rev`;
                spindleSpeedResult.textContent = `${Math.round(adjustedSpindleSpeed)} RPM`;
                feedRateResult.textContent = `${Math.round(finalFeedRate)} mm/min`;
                resultsDiv.classList.remove('hidden');
            }
            setMaterial('mildSteel');
        })();

        // --- PCD COORDINATE GENERATOR ---
        (() => {
            const pcdInput = document.getElementById('pcd');
            const startAngleInput = document.getElementById('start-angle');
            const lastAngleInput = document.getElementById('last-angle');
            const numHolesInput = document.getElementById('num-holes');
            const planeSelect = document.getElementById('plane-select');
            const generateCoordsBtn = document.getElementById('generate-coords-btn');
            const downloadPdfBtn = document.getElementById('download-pdf-btn');
            const pcdResultsDiv = document.getElementById('pcd-results');
            const coordinatesOutput = document.getElementById('coordinates-output');
            
            generateCoordsBtn.addEventListener('click', () => {
                const { coords, labels } = getPcdData();
                if (coords) displayCoordinates(coords, labels);
            });

            downloadPdfBtn.addEventListener('click', () => {
                const data = getPcdData();
                if (data.coords) {
                    generateAndDownloadPdf(data);
                }
            });

            function getPcdData() {
                const pcd = parseFloat(pcdInput.value);
                const startAngle = parseFloat(startAngleInput.value);
                const lastAngle = parseFloat(lastAngleInput.value);
                const numHoles = parseInt(numHolesInput.value);
                
                if (isNaN(pcd) || isNaN(startAngle) || isNaN(lastAngle) || isNaN(numHoles) || pcd <= 0 || numHoles < 1) {
                    showError('Please fill all PCD fields with valid positive numbers.');
                    return {};
                }
                hideError();

                const plane = planeSelect.value;
                const labels = plane === 'G17' ? ['X', 'Y'] : plane === 'G18' ? ['X', 'Z'] : ['Y', 'Z'];
                const radius = pcd / 2;
                const coords = [];
                
                const totalAngle = lastAngle - startAngle;
                const isFullCircle = Math.abs(totalAngle) % 360 === 0 && numHoles > 1;
                const angleStep = numHoles > 1 ? (isFullCircle ? totalAngle / numHoles : totalAngle / (numHoles - 1)) : 0;

                for (let i = 0; i < numHoles; i++) {
                    const angle = startAngle + (i * angleStep);
                    const rad = angle * (Math.PI / 180);
                    const c1 = radius * Math.cos(rad);
                    const c2 = radius * Math.sin(rad);
                    coords.push({ c1: c1.toFixed(4), c2: c2.toFixed(4) });
                }
                return { coords, labels, pcd, startAngle, lastAngle, numHoles, plane };
            }

            function displayCoordinates(coords, labels) {
                let output = `Hole | ${labels[0].padEnd(10)} | ${labels[1].padEnd(10)}\n`;
                output += '-'.repeat(30) + '\n';
                coords.forEach((c, i) => {
                    output += `${(i + 1).toString().padEnd(4)} | ${c.c1.padEnd(10)} | ${c.c2.padEnd(10)}\n`;
                });
                coordinatesOutput.textContent = output;
                pcdResultsDiv.classList.remove('hidden');
            }

            function generateAndDownloadPdf(data) {
                const { jsPDF } = window.jspdf;
                const doc = new jsPDF({
                    orientation: 'portrait',
                    unit: 'mm',
                    format: 'a4'
                });

                doc.setFontSize(18);
                doc.text('PCD Coordinate Report', 105, 20, { align: 'center' });

                doc.setFontSize(12);
                doc.text('Parameters:', 14, 35);
                doc.setFontSize(10);
                doc.text(`Pitch Circle Diameter (PCD): ${data.pcd} mm`, 14, 45);
                doc.text(`Number of Holes: ${data.numHoles}`, 14, 50);
                doc.text(`Angle Range: ${data.startAngle}° to ${data.lastAngle}°`, 14, 55);
                doc.text(`G-Code Plane: ${data.plane}`, 14, 60);

                doc.setFontSize(12);
                doc.text('Coordinates:', 14, 75);
                
                // Table Header
                doc.setFont('helvetica', 'bold');
                doc.setFontSize(10);
                doc.text('Hole', 14, 85);
                doc.text(data.labels[0], 40, 85);
                doc.text(data.labels[1], 80, 85);
                doc.line(14, 87, 120, 87); // Underline header

                // Table Body
                doc.setFont('courier', 'normal');
                let yPos = 95;
                data.coords.forEach((c, i) => {
                    if (yPos > 280) { // Add new page if content overflows
                        doc.addPage();
                        yPos = 20;
                    }
                    doc.text((i + 1).toString(), 14, yPos);
                    doc.text(c.c1, 40, yPos);
                    doc.text(c.c2, 80, yPos);
                    yPos += 7;
                });

                doc.save('pcd-coordinates.pdf');
            }
        })();

        // --- UTILITY FUNCTIONS ---
        function showError(message) {
            errorMessage.textContent = message;
            errorMessage.classList.remove('hidden');
        }
        function hideError() {
            errorMessage.classList.add('hidden');
        }
    </script>
</body>
</html>
